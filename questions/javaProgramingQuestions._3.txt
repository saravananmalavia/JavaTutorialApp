
    ---

    ### **Number-Based Challenges**
    1. Write a program to find the **n-th Armstrong number** (e.g., 153 is Armstrong: \(1^3 + 5^3 + 3^3 = 153\)).
    2. Write a program to find the **next prime number** after a given number.
    3. Write a program to check if a number is a **Kaprekar number** (e.g., 45 → \(45^2 = 2025\), split as 20 and 25, \(20 + 25 = 45\)).
    4. Write a program to find the **digital root** of a number (sum of digits until a single digit remains).
    5. Write a program to check if a number is a **Keith number** (e.g., 197 → sequence starts with 1, 9, 7; 1+9+7=17, etc.).
    6. Write a program to generate the **first N Fibonacci numbers** where each term is the sum of the previous two terms.
    7. Write a program to find the **sum of all prime numbers** between two given numbers.
    8. Write a program to find the **sum of factorials** of the digits of a number (e.g., 145 → \(1! + 4! + 5! = 145\)).
    9. Write a program to check if a number is **automorphic** (e.g., 76 → \(76^2 = 5776\), ends with 76).
    10. Write a program to calculate the **Nth triangular number** (\(T_n = n(n+1)/2\)).

    ---

    ### **Pattern and Shape Problems**
    11. Print a number pyramid like this:
        ```
           1
          2 3
         4 5 6
        ```
    12. Print a Pascal’s Triangle for N rows:
        ```
             1
            1 1
           1 2 1
          1 3 3 1
        ```
    13. Print a checkerboard pattern for a given size \(N \times N\):
        ```
        # # # #
         # # # #
        # # # #
         # # # #
        ```
    14. Print a spiral pattern for a square of size N (e.g., \(3 \times 3\)):
        ```
        1 2 3
        8 9 4
        7 6 5
        ```
    15. Print this pattern for N rows:
        ```
        1
        1 0
        1 0 1
        1 0 1 0
        ```

    ---

    ### **Character-Based Challenges**
    16. Write a program to count the number of **uppercase** and **lowercase** letters in a string.
    17. Write a program to check if a given string is **anagrammatic** (e.g., "listen" and "silent").
    18. Write a program to remove all **vowels** from a given string.
    19. Write a program to find the **frequency of each character** in a string.
    20. Write a program to print all **substrings** of a given string.

    ---

    ### **Iterative and Conditional Logic Problems**
    21. Write a program to find the **Hamming distance** between two numbers (number of differing bits in their binary representations).
    22. Write a program to find the **sum of the series**: \(1 + \frac{1}{2^2} + \frac{1}{3^2} + \dots\).
    23. Write a program to simulate the **towers of Hanoi** problem for N disks.
    24. Write a program to calculate the **sum of squares of the first N natural numbers**.
    25. Write a program to check if a number is a **happy number** (e.g., repeatedly sum the squares of its digits until the result is 1 or a loop).

    ---

    These challenges blend **mathematics**, **patterns**, and **string manipulations**, making them perfect for beginners who want to solidify their foundational understanding of Java programming while advancing to more complex problems. Let me know if you'd like further explanations or solutions for any of these!